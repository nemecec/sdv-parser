buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        // A plugin that will virtually set project versions, based on current Git branch or Git tag.
        // The build.gradle files will not be modified, versions are modified in memory only.
        //
        // The version resolution configuration can be tested on command line for example by:
        //    gradle :version -q
        // or
        //    gradle :version -q -Pgit.branch=feature/test-it
        //
        // https://github.com/qoomon/gradle-git-versioning-plugin
        classpath "me.qoomon:gradle-git-versioning-plugin:1.2.3"
    }
}

plugins {
    id 'maven-publish'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "me.qoomon.git-versioning"

group 'net.sympower'
archivesBaseName = 'sdv-parser'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
    withSourcesJar()
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    junitVersion = "5.6.2"
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testImplementation("org.assertj:assertj-core:3.16.1")
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

gitVersioning {
    branch {
        // Matches the "master" branch and uses the "project.version" that is currently specified in the build.gradle file
        pattern = 'master'
        versionFormat = '${version}'
    }
    branch {
        // Matches all branches except "master" and uses the branch name and "-SNAPSHOT" suffix for the "project.version"
        pattern = '^((?!master$).*)'
        versionFormat = '${1}-SNAPSHOT'
    }
    commit {
        // Fallback in case git branch information is not available (detached HEAD or no match with the branch patterns above)
        versionFormat = '${commit.short}'
    }
}

publishing {
    publications {
        "$project.name"(MavenPublication) {
            from components.java

            // https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:resolved_dependencies
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "$sympowerMavenRepoUsername"
                password "$sympowerMavenRepoPassword"
            }
            url = version.endsWith('SNAPSHOT') ? "${sympowerMavenRepoSnapshotsUrl}" : "${sympowerMavenRepoReleasesUrl}"
        }
    }
}
